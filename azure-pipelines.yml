# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- none
name: API-${{ upper(parameters.deploymentEnvironment) }}-$(ReleaseVersion)-$(Date:yyyyMMdd)$(Rev:.r)

variables:
  - ${{ if eq(parameters.deploymentEnvironment, 'production') }}:
      - group: deployment-group-prod
  - ${{ if eq(parameters.deploymentEnvironment, 'staging') }}:
      - group: deployment-group-stg
  - name: deploymentEnvironment
    value: ${{ parameters.deploymentEnvironment }}

    # Agent VM image name
  - name: vmImageName
    value: 'windows-2019'
    # Working Directory
  - name: functionAppworkingDirectory
    value: '$(System.DefaultWorkingDirectory)/API/NuovoAutoServer.Api'

parameters:
  - name: deploymentEnvironment
    displayName: Deployment Environment
    type: string
    default: staging
    values:
      - staging
      - production

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Write-Host "path - $(functionAppworkingDirectory)"

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          *.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-api.zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-api.zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: 'Deploy to ${{ upper(parameters.deploymentEnvironment) }}'
    environment: ${{ upper(parameters.deploymentEnvironment) }}
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId)-api.zip'